[{"/Users/joshuabaker/solswines-staking-ui/staking-ui/pages/_app.tsx":"1","/Users/joshuabaker/solswines-staking-ui/staking-ui/pages/index.tsx":"2","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/CollectionItem/CollectionItem.tsx":"3","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/Header/Header.tsx":"4","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/WalletManager/WalletManager.tsx":"5","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/WalletProvider/WalletProvider.tsx":"6","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/icons/LoadingIcon.tsx":"7","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/icons/index.tsx":"8","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/gem-farm/common/gem-bank/index.ts":"9","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/gem-farm/common/gem-farm/index.ts":"10","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/gem-farm/common/util/index.ts":"11","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/gem-farm/common/web3/NFTget.ts":"12","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/metadata.ts":"13","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/utils/borsh.ts":"14","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/utils/ids.ts":"15","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/utils/index.ts":"16","/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/utils/programIds.ts":"17"},{"size":1223,"mtime":1649995810530,"results":"18","hashOfConfig":"19"},{"size":17588,"mtime":1649957941202,"results":"20","hashOfConfig":"19"},{"size":4201,"mtime":1649840989508,"results":"21","hashOfConfig":"19"},{"size":4695,"mtime":1649686883180,"results":"22","hashOfConfig":"19"},{"size":2634,"mtime":1649684348048,"results":"23","hashOfConfig":"19"},{"size":2238,"mtime":1649684348048,"results":"24","hashOfConfig":"19"},{"size":835,"mtime":1649684348048,"results":"25","hashOfConfig":"19"},{"size":13585,"mtime":1649684348049,"results":"26","hashOfConfig":"19"},{"size":3273,"mtime":1649684348052,"results":"27","hashOfConfig":"19"},{"size":7957,"mtime":1649684348052,"results":"28","hashOfConfig":"19"},{"size":1051,"mtime":1649684348053,"results":"29","hashOfConfig":"19"},{"size":2119,"mtime":1649684348053,"results":"30","hashOfConfig":"19"},{"size":27391,"mtime":1649684348053,"results":"31","hashOfConfig":"19"},{"size":996,"mtime":1649684348054,"results":"32","hashOfConfig":"19"},{"size":1937,"mtime":1649684348054,"results":"33","hashOfConfig":"19"},{"size":1535,"mtime":1649684348054,"results":"34","hashOfConfig":"19"},{"size":1193,"mtime":1649684348055,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1btzope",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joshuabaker/solswines-staking-ui/staking-ui/pages/_app.tsx",["90"],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/pages/index.tsx",["91","92","93","94"],[],"/** @jsxImportSource theme-ui */\nimport { Flex, Text, Heading, Spinner, Button, Container } from \"theme-ui\"\n\nimport CollectionItem from \"@/components/CollectionItem/CollectionItem\"\nimport useGemFarmStaking from \"hooks/useGemFarmStaking\"\nimport { useWallet } from \"@solana/wallet-adapter-react\"\n// import { LoadingIcon } from \"@/components/icons/LoadingIcon\"\n\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\"\nimport Header from \"@/components/Header/Header\"\nimport { LoadingIcon } from \"@/components/icons/LoadingIcon\"\nimport { useState } from \"react\"\n\nconst StakePage = () => {\n  const [farmId, setFarmId] = useState(process.env.NEXT_PUBLIC_GEMFARM_ID || \"\")\n\n  const {\n    walletNFTs,\n    farmAccount,\n    farmerAccount,\n    farmerVaultAccount,\n    farmerStatus,\n    selectedWalletItems,\n    isLocked,\n    availableA,\n    feedbackStatus,\n    handleStakeButtonClick,\n    handleUnstakeButtonClick,\n    handleClaimButtonClick,\n    handleWalletItemClick,\n    handleMoveToVaultButtonClick,\n    farmerVaultNFTs,\n    selectedVaultItems,\n    handleMoveToWalletButtonClick,\n    handleVaultItemClick,\n    handleInitStakingButtonClick,\n    handleRefreshRewardsButtonClick,\n  } = useGemFarmStaking(farmId)\n\n  const { publicKey } = useWallet()\n\n  return (\n    <Container>\n      <Header farmId={farmId} setFarmId={setFarmId} />\n\n      <Flex\n        sx={{\n          flexDirection: \"column\",\n          marginTop: \"3.2rem\",\n          alignItems: \"center\",\n          padding: \"0 1.6rem\",\n        }}\n      >\n        <Text variant=\"totalswines\">Total Swines staked</Text>\n        <Text variant=\"totalpercentage\">&nbsp;\n                      {(farmAccount?.gemsStaked.toNumber() / 10)}%</Text>\n\n        {!publicKey ? (\n          /** Render nothing if there is no wallet connected. */\n          <Text\n            sx={{\n              textAlign: \"center\",\n              margin: \"3.2rem 0\",\n            }}\n            variant=\"headingSpecialheyhaters\"\n          >\n            <Text>Connect your wallet to send your swine on a mission!<br></br></Text>\n            <Text>Earn $COINK by staking your Swines. Its just that simple.<br></br><br></br></Text>\n<Text>Once claimed, youll be able to use these utility tokens for the caswino, Marketplace, auction house and a whole slew of other features to come.<br></br><br></br></Text>\n<Text>SolSwines earn 300 $COINK a day</Text>\n          </Text>\n        \n\n        ) : !farmerAccount ? (\n          // <LoadingIcon\n          //   size={\"3.2rem\"}\n          //   sx={{\n          //     margin: \"3.2rem 0\"\n          //   }}\n          // />\n          <Text mt=\"1.6rem\">Farm ID is not configured.</Text>\n        ) : /** If there is farmerAccount variable, but no address, it means account isn't initialized */\n        farmerAccount && !farmerAccount?.identity ? (\n          <Button\n            sx={{\n              margin: \"3.2rem 0\",\n            }}\n            onClick={handleInitStakingButtonClick}\n          >\n            <Text variant=\"headingSpecialheyhaters\">Build Mission Table</Text>\n          </Button>\n        ) : (\n          <>\n            {/** Render everything, since there is wallet and farmer account */}\n            {/** Farmer account info section */}\n            {farmerAccount?.identity ? (\n              <>\n                <Flex\n                  sx={{\n                    flexDirection: \"column\",\n                    margin: \"1.6rem 0\",\n                  }}\n                >\n                  <Flex\n                    sx={{\n                      gap: \".4rem\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    }}\n                  >\n                    <img\n                      sx={{\n                        maxHeight: \"2.4rem\",\n                      }}\n                      src=\"images/gemtransparent.gif\"\n                    />\n                    <Text variant=\"headingSpecialheyhaters\">\n                      Your Swines staked:&nbsp;\n                      {farmerAccount?.gemsStaked.toNumber()}\n                    </Text>\n                  </Flex>\n                  <Text variant=\"headingSpecialheyhaters\"\n                    sx={{\n                      textAlign: \"center\",\n                    }}\n                  >\n                    Mission Table status: <b>{isLocked ? \"locked\" : \"unlocked\"}</b>\n                    <br />\n                  </Text>\n                  <Text variant=\"headingSpecialheyhaters\"\n                    sx={{\n                      textAlign: \"center\",\n                    }}\n                  >\n                    Account status: <b>{farmerStatus}</b>\n                    <br />\n                  </Text>\n                </Flex>\n\n                <Flex\n                  sx={{\n                    gap: \"1.6rem\",\n                    margin: \"1.6rem 0\",\n                    flexWrap: \"wrap\",\n                    alignItems: \"center\",\n                    alignSelf: \"stretch\",\n                    justifyContent: \"center\",\n\n                    \"@media (min-width: 768px\": {\n                      flexDirection: \"row\",\n                    },\n                  }}\n                >\n                  <Button\n                    onClick={handleStakeButtonClick}\n                    disabled={\n                      !(farmerStatus === \"unstaked\" && farmerVaultNFTs?.length)\n                    }\n                  >\n                    <Text variant=\"headingSpecialheyhaters\">Stake</Text>\n                  </Button>\n                  <Button\n                    onClick={handleUnstakeButtonClick}\n                    disabled={\n                      !(\n                        farmerStatus === \"staked\" ||\n                        farmerStatus === \"pendingCooldown\"\n                      )\n                    }\n                  >\n                    {farmerStatus === \"pendingCooldown\"\n                      ? <Text variant=\"headingSpecialheyhaters\">End cooldown</Text>\n                      : <Text variant=\"headingSpecialheyhaters\">Unstake</Text>}\n                  </Button>\n                  <Button\n                    onClick={handleClaimButtonClick}\n                    disabled={!Number(availableA)}\n                  >\n                    <Text variant=\"headingSpecialheyhaters\">Claim</Text>{\" \"}\n                    <img\n                      sx={{\n                        margin: \"0 .4rem 0 .8rem\",\n                        maxHeight: \"2.4rem\",\n                      }}\n                      src=\"images/icon-list-item.png\"\n                    />\n                    {availableA ? (\n                      <Text variant=\"headingSpecialheyhaters\"><b>{(availableA / 1000000000).toFixed(2)}</b></Text>\n                    ) : (\n                      0\n                    )}\n                  </Button>\n                  <Button onClick={handleRefreshRewardsButtonClick}>\n                  <Text variant=\"headingSpecialheyhaters\">Refresh</Text>\n                  </Button>\n                </Flex>\n                <Flex\n                  sx={{\n                    alignItems: \"center\",\n                    gap: \".8rem\",\n                    margin: \"5px 0\",\n                  }}\n                >\n                  {feedbackStatus ? (\n                    <>\n                      <LoadingIcon size=\"1.6rem\" />\n                      {\"  \"} <Text variant=\"small\">{feedbackStatus}</Text>\n                    </>\n                  ) : (\n                    \"\"\n                  )}\n                  &nbsp;\n                </Flex>\n              </>\n            ) : null}\n\n            <Tabs\n              sx={{\n                margin: \"3.2rem 0\",\n                alignSelf: \"stretch\",\n                minHeight: \"48rem\",\n              }}\n            >\n              <TabList>\n                <Tab><Text variant=\"headingSpecialheyhaters\">Your Wallet</Text></Tab>\n                <Tab><Text variant=\"headingSpecialheyhaters\">Your Mission Table</Text></Tab>\n              </TabList>\n\n              <TabPanel>\n                {walletNFTs ? (\n                  walletNFTs.length ? (\n                    <Flex\n                      sx={{\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                      }}\n                    >\n                      <div\n                        sx={{\n                          display: \"grid\",\n                          gridTemplateColumns:\n                            walletNFTs.length > 1 ? \"1fr 1fr\" : \"1fr\",\n                          gap: \"1.6rem\",\n                          alignItems: \"center\",\n\n                          \"@media (min-width: 768px)\": {\n                            gridTemplateColumns:\n                              walletNFTs.length > 9\n                                ? \"1fr 1fr 1fr 1fr 1fr 1fr 1fr\"\n                                : walletNFTs.length > 4\n                                ? \"1fr 1fr 1fr 1fr 1fr\"\n                                : walletNFTs.map(() => \"1fr\").join(\" \"),\n                          },\n                        }}\n                      >\n                        {walletNFTs.map((item) => {\n                          const isSelected = selectedWalletItems.find(\n                            (NFT) =>\n                              NFT.onChain.metaData.mint ===\n                              item.onChain.metaData.mint\n                          )\n\n                          return (\n                            <CollectionItem\n                              key={item.onChain.metaData.mint}\n                              item={item}\n                              onClick={\n                                !isLocked ? handleWalletItemClick : () => true\n                              }\n                              sx={{\n                                maxWidth: \"16rem\",\n                                \"> img\": {\n                                  border: \"3px solid transparent\",\n                                  borderColor: isSelected\n                                    ? \"primary\"\n                                    : \"transparent\",\n                                },\n                              }}\n                            />\n                          )\n                        })}\n                      </div>\n                      {walletNFTs.length && !isLocked ? (\n                        <Text\n                          sx={{\n                            margin: \"3.2rem 0 .8rem 0\",\n                          }}\n                          variant=\"small\"\n                        >\n                          Select your Swine to move them to your Mission Table.\n                        </Text>\n                      ) : null}\n                      <Text>\n                        {/* Selected:{\" \"}\n                    {selectedWalletItems && selectedWalletItems.length\n                      ? selectedWalletItems\n                          .map((NFT) => NFT.onChain.metaData.data.name)\n                          .join(\", \")\n                      : null} */}\n                        {selectedWalletItems?.length && !isLocked ? (\n                          <Button onClick={handleMoveToVaultButtonClick}>\n                            <Text variant=\"headingSpecialheyhaters\">Send selected</Text>\n                          </Button>\n                        ) : null}\n                      </Text>\n                    </Flex>\n                  ) : (\n                    /** walletNFTs fetched but array is empty, means current wallet has no NFT. */\n                    <Flex\n                      sx={{\n                        justifyContent: \"center\",\n                        alignSelf: \"stretch\",\n                      }}\n                    >\n                      <Text>There are no Swines in your wallet.</Text>\n                    </Flex>\n                  )\n                ) : /** No walletNFTs and public key, means it is loading */\n                publicKey ? (\n                  <Flex\n                    sx={{\n                      justifyContent: \"center\",\n                      alignSelf: \"stretch\",\n                    }}\n                  >\n                    <Spinner variant=\"styles.spinnerLarge\" />\n                  </Flex>\n                ) : null}\n              </TabPanel>\n              <TabPanel>\n                {farmerVaultAccount ? (\n                  <>\n                    {/** Vault UI section */}\n                    {/* <ThemeHeading\n                  variant=\"heading3\"\n                  sx={{\n                    marginTop: \"3.2rem\",\n                    textAlign: \"center\"\n                  }}\n                >\n                  Your Vault\n                </ThemeHeading> */}\n\n                    {farmerVaultNFTs ? (\n                      farmerVaultNFTs.length ? (\n                        <Flex\n                          sx={{\n                            flexDirection: \"column\",\n                            justifyContent: \"center\",\n                            alignSelf: \"stretch\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          <div\n                            sx={{\n                              display: \"grid\",\n                              gridTemplateColumns:\n                                farmerVaultNFTs.length > 1 ? \"1fr 1fr\" : \"1fr\",\n                              gap: \"1.6rem\",\n\n                              \"@media (min-width: 768px)\": {\n                                gridTemplateColumns:\n                                  farmerVaultNFTs.length > 9\n                                    ? \"1fr 1fr 1fr 1fr 1fr 1fr 1fr\"\n                                    : farmerVaultNFTs.length > 4\n                                    ? \"1fr 1fr 1fr 1fr 1fr\"\n                                    : farmerVaultNFTs\n                                        .map(() => \"1fr\")\n                                        .join(\" \"),\n                              },\n                            }}\n                          >\n                            {farmerVaultNFTs.map((item) => {\n                              const isSelected = selectedVaultItems.find(\n                                (NFT) =>\n                                  NFT.onChain.metaData.mint ===\n                                  item.onChain.metaData.mint\n                              )\n\n                              return (\n                                <CollectionItem\n                                  key={item.onChain.metaData.mint}\n                                  item={item}\n                                  onClick={\n                                    !isLocked\n                                      ? handleVaultItemClick\n                                      : () => true\n                                  }\n                                  sx={{\n                                    maxWidth: \"16rem\",\n                                    \"> img\": {\n                                      border: \"3px solid transparent\",\n                                      borderColor: isSelected\n                                        ? \"primary\"\n                                        : \"transparent\",\n                                    },\n                                  }}\n                                />\n                              )\n                            })}\n                          </div>\n                          {farmerVaultNFTs.length && !isLocked ? (\n                            <Text\n                              sx={{\n                                margin: \"3.2rem 0 .8rem 0\",\n                              }}\n                              variant=\"headingSpecialheyhaters\"\n                            >\n                              Select Swines to send them to your wallet.\n                            </Text>\n                          ) : null}\n\n                          {selectedVaultItems && selectedVaultItems.length ? (\n                            <>\n                              {/* Selected:{\" \"}\n                          {selectedVaultItems\n                            .map((NFT) => NFT.onChain.metaData.data.name)\n                            .join(\", \")} */}\n                              {!isLocked ? (\n                                <Button onClick={handleMoveToWalletButtonClick}>\n                                  <Text variant=\"headingSpecialheyhaters\">Withdraw selected</Text>\n                                </Button>\n                              ) : null}\n                            </>\n                          ) : null}\n                        </Flex>\n                      ) : (\n                        /** vaultNFTs fetched but array is empty, means current wallet has no NFT. */\n                        <Flex\n                          sx={{\n                            justifyContent: \"center\",\n                            alignSelf: \"stretch\",\n                          }}\n                        >\n                          <Text>There are no Swines in your vault.</Text>\n                        </Flex>\n                      )\n                    ) : /** No vaultNFTs and public key, means it is loading */\n                    publicKey ? (\n                      <Flex\n                        sx={{\n                          justifyContent: \"center\",\n                          alignSelf: \"stretch\",\n                        }}\n                      >\n                        <Spinner variant=\"styles.spinnerLarge\" />\n                      </Flex>\n                    ) : null}\n                  </>\n                ) : null}\n              </TabPanel>\n            </Tabs>\n          </>\n        )}\n      </Flex>\n    </Container>\n  )\n}\n\nexport default StakePage\n","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/CollectionItem/CollectionItem.tsx",["95","96"],[],"/** @jsxImportSource theme-ui */\nimport React, { useRef, useState } from \"react\"\nimport { Button, Flex, Text } from \"theme-ui\"\nimport Link from \"next/link\"\n\nimport { DotsIcon } from \"@/components/icons/\"\nimport useOutsideClick from \"hooks/useOutsideClick\"\nimport { NFT } from \"hooks/useWalletNFTs\"\n\ntype Props = {\n  item: NFT\n  additionalOptions?: React.ReactElement\n  onClick?: (item: NFT) => void\n  className?: string\n}\n\nconst CollectionItem = (props: Props) => {\n  const { item, additionalOptions = null, className, onClick } = props\n  const [isDropdownActive, setIsDropdownActive] = useState(false)\n  const wrapperRef = useRef(null)\n  useOutsideClick(wrapperRef, () => setIsDropdownActive(false))\n\n  const handleDropdownToggle = () => {\n    setIsDropdownActive((previous) => !previous)\n  }\n\n  if (!item) return null\n\n  const { onChain, offChain } = item\n\n  const handleOnClick = (item: NFT) => () => onClick ? onClick(item) : true\n  const handleKeyDown =\n    (item: NFT) => (e: React.KeyboardEvent<HTMLDivElement>) => {\n      if (onClick && e.keyCode == 13) {\n        onClick(item)\n      }\n\n      return true\n    }\n\n  return (\n    <Flex\n      tabIndex={1}\n      ref={wrapperRef}\n      sx={{\n        flexDirection: \"column\",\n        position: \"relative\",\n        transition: \"all .125s linear\",\n        outline: \"none\",\n        cursor: onClick ? \"pointer\" : \"auto\",\n\n        \"&:hover, &:focus, > .toggle-menu:focus\": {\n          \"> .toggle-menu\": {\n            visibility: \"visible\",\n            opacity: 1\n          },\n\n          \"> img\": {\n            opacity: 0.7\n          }\n        }\n      }}\n      className={className}\n      onClick={handleOnClick(item)}\n      onKeyDown={handleKeyDown(item)}\n    >\n      <Button\n        tabIndex={1}\n        variant=\"resetted\"\n        className=\"toggle-menu\"\n        onClick={handleDropdownToggle}\n        sx={{\n          display: \"flex\",\n          position: \"absolute\",\n          visibility: isDropdownActive ? \"visible\" : \"hidden\",\n          opacity: isDropdownActive ? 1 : 0,\n          right: \".8rem\",\n          top: \".8rem\",\n          zIndex: 1,\n          transition: \"all .125s linear\",\n\n          \"&:hover, &:focus\": {\n            visibility: \"visible\",\n            cursor: \"pointer\",\n            opacity: 1\n          }\n        }}\n      >\n        <DotsIcon\n          sx={{\n            width: \"3.2rem\",\n            height: \"3.2rem\",\n            stroke: \"heading\",\n            strokeWidth: \"2\"\n          }}\n        />\n      </Button>\n      {/** Dropdown */}\n      <Flex\n        sx={{\n          position: \"absolute\",\n          visibility: isDropdownActive ? \"visible\" : \"hidden\",\n          opacity: isDropdownActive ? 1 : 0,\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n          padding: \"2.4rem 1.2rem\",\n          top: 40,\n          right: 0,\n          backgroundColor: \"background\",\n          transition: \"all .125s linear\",\n          boxShadow: \"0px 4px 4px rgba(0,0,0,0.25)\",\n          gap: \".8rem\",\n          zIndex: 2\n        }}\n      >\n        <a\n          href={onChain.metaData.data.uri}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          tabIndex={1}\n        >\n          <Text variant=\"headingSpecialheyhaters\"></Text>\n        </a>\n        <a\n          href={offChain.image}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          tabIndex={1}\n        >\n          <Text variant=\"headingSpecialheyhaters\">View Swine</Text>\n        </a>\n        {additionalOptions || null}\n      </Flex>\n      <img\n        sx={{\n          borderRadius: \".4rem\",\n          transition: \"all .125s linear\",\n          opacity: isDropdownActive ? 0.7 : 1\n        }}\n        src={offChain.image}\n      />\n      <Text\n        variant=\"small\"\n        sx={{\n          overflow: \"hidden\",\n          whiteSpace: \"nowrap\",\n          textOverflow: \"ellipsis\",\n          padding: \"0 .8rem\",\n          mt: \".8rem\"\n        }}\n      >\n        {offChain.name}\n        {/* <br />\n    <a\n      href={`https://solscan.io/token/${onChain.metaData.mint}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {onChain.metaData.mint}\n    </a> */}\n      </Text>\n    </Flex>\n  )\n}\n\nexport default CollectionItem\n","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/Header/Header.tsx",["97"],[],"/** @jsxImportSource theme-ui */\nimport Link from \"next/link\"\nimport { Button, Container, Flex, Input, Text } from \"@theme-ui/components\"\n\nimport WalletManager from \"@/components/WalletManager/WalletManager\"\nimport { Dispatch, SetStateAction, useState } from \"react\"\nimport { CloseIcon, MenuIcon } from \"../icons\"\n\ntype Props = {\n  farmId?: string\n  setFarmId?: Dispatch<SetStateAction<string>>\n}\nconst Header = ({ farmId, setFarmId }: Props) => {\n  const [isMobileMenuActive, setIsMobileMenuActive] = useState(false)\n  const [isChangingFarmId, setIsChangingFarmId] = useState(false)\n\n  return (\n    <Flex\n      sx={{\n        position: \"sticky\",\n        top: 0,\n        zIndex: 9,\n        background: (theme) => theme.colors?.backgroundGradient,\n        borderBottom: \"1px solid\",\n        borderColor: \"background2\",\n      }}\n    >\n      <Container>\n        <Flex\n          sx={{\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n          p=\".8rem\"\n        >\n          <Link href=\"/\" passHref>\n            <Flex as=\"a\" sx={{ alignItems: \"center\", flexDirection: \"column\" }}>\n              <Flex sx={{ alignItems: \"center\" }}>\n                <Text as=\"h1\" variant=\"headingSpecial\" ml=\".4rem\">\n                 SWINE\n                </Text>\n\n                <img\n                  sx={{\n                    maxHeight: \"4.8rem\",\n                  }}\n                  src=\"/images/gemtransparent.gif\"\n                  alt=\"SolSwines\"\n                />\n\n                <Text as=\"h1\" variant=\"headingSpecial\" ml=\".4rem\">\n                  MISSIONS\n                </Text>\n              </Flex>\n              {/* <Text\n                sx={{\n                  display: \"block\",\n                }}\n                variant=\"small\"\n              >\n                by Gemworks\n              </Text> */}\n            </Flex>\n          </Link>\n\n          <Flex\n            as=\"nav\"\n            sx={{\n              gap: \"1.6rem\",\n              display: \"none\",\n              alignItems: \"center\",\n\n              /** Mobile styles when the menu is active */\n              ...(isMobileMenuActive && {\n                display: \"flex\",\n                position: \"fixed\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                top: \"0\",\n                left: \"0\",\n                width: \"100vw\",\n                height: \"100vh\",\n                padding: \"1.6rem\",\n                transition:\n                  \"opacity 0.125s cubic-bezier(0.175, 0.885, 0.32, 1.275),visibility 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\n                backgroundColor: \"background\",\n                zIndex: 99,\n\n                \"& > a\": {\n                  marginBottom: \".8rem\",\n                },\n\n                \"&.active\": {\n                  visibility: \"visible\",\n                  opacity: 1,\n                },\n              }),\n\n              /** Desktop styles (reset mobile) */\n              \"@media (min-width: 768px)\": {\n                display: \"flex\",\n                flexDirection: \"row\",\n                width: \"auto\",\n                height: \"auto\",\n                padding: 0,\n                position: \"relative\",\n              },\n            }}\n          >\n            <Button\n              sx={{\n                alignSelf: \"flex-end\",\n                padding: \".8rem\",\n\n                ...(!isMobileMenuActive && { display: \"none\" }),\n              }}\n              onClick={() => setIsMobileMenuActive(false)}\n            >\n              <CloseIcon />\n            </Button>\n            {isChangingFarmId && (\n              <Input\n                sx={{\n                  fontSize: \"1.1rem\",\n                  padding: \".4rem\",\n                  border: \"none\",\n                  borderBottom: \"1px solid\",\n                  borderRadius: 0,\n                  width: \"auto\",\n                }}\n                value={farmId}\n                onChange={(e) => setFarmId(e.target.value)}\n              />\n            )}\n\n            <a\n              tabIndex={0}\n              sx={{\n                margin: \"0 auto\",\n                fontSize: \"1.1rem\",\n                whiteSpace: \"nowrap\",\n              }}\n              onClick={() => setIsChangingFarmId((prev) => !prev)}\n            >\n            </a>\n\n            <WalletManager />\n          </Flex>\n          <Button\n            sx={{\n              padding: \".8rem\",\n              \"@media(min-width: 768px)\": {\n                display: \"none\",\n              },\n            }}\n            onClick={() => setIsMobileMenuActive(true)}\n          >\n            <MenuIcon />\n          </Button>\n        </Flex>\n      </Container>\n    </Flex>\n  )\n}\n\nexport default Header\n","/Users/joshuabaker/solswines-staking-ui/staking-ui/components/WalletManager/WalletManager.tsx",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/components/WalletProvider/WalletProvider.tsx",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/components/icons/LoadingIcon.tsx",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/components/icons/index.tsx",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/gem-farm/common/gem-bank/index.ts",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/gem-farm/common/gem-farm/index.ts",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/gem-farm/common/util/index.ts",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/gem-farm/common/web3/NFTget.ts",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/metadata.ts",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/utils/borsh.ts",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/utils/ids.ts",[],[],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/utils/index.ts",[],["98"],"/Users/joshuabaker/solswines-staking-ui/staking-ui/lib/utils/programIds.ts",[],[],{"ruleId":"99","severity":1,"message":"100","line":34,"column":9,"nodeType":"101","endLine":34,"endColumn":58},{"ruleId":"102","severity":1,"message":"103","line":111,"column":21,"nodeType":"101","endLine":116,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":111,"column":21,"nodeType":"101","endLine":116,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":180,"column":21,"nodeType":"101","endLine":186,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":180,"column":21,"nodeType":"101","endLine":186,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":134,"column":7,"nodeType":"101","endLine":141,"endColumn":9},{"ruleId":"104","severity":1,"message":"105","line":134,"column":7,"nodeType":"101","endLine":141,"endColumn":9},{"ruleId":"102","severity":1,"message":"103","line":43,"column":17,"nodeType":"101","endLine":49,"endColumn":19},{"ruleId":"106","severity":2,"message":"107","line":8,"column":24,"nodeType":"108","endLine":8,"endColumn":39,"suppressions":"109"},"@next/next/no-css-tags","Do not include stylesheets manually. See: https://nextjs.org/docs/messages/no-css-tags","JSXOpeningElement","@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/rules-of-hooks","React Hook \"useLocalStorage\" is called in function \"findProgramAddress\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","Identifier",["110"],{"kind":"111","justification":"112"},"directive",""]